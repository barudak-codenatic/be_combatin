// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  STUDENT
  ADMIN
}

model User {
  id String @id @default(uuid()) @db.Uuid

  contentProgress contentProgress[]
  moduleProgress moduleProgress[]
  friendshipsSent Friendship[] @relation("FriendshipRequester")
  friendshipsReceived Friendship[] @relation("FriendshipRecipient")

  name String
  img_url String?
  email String @unique
  hash String
  verified_at DateTime?
  role  userRole @default(STUDENT)
  coin Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Friendship {
  id String @id @default(uuid()) @db.Uuid
  requesterId String  @db.Uuid
  recipientId String  @db.Uuid
  status FriendshipStatus @default(PENDING)

  requester User @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  recipient User @relation("FriendshipRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requesterId, recipientId]) 
  
  @@map("friendship")
}


model Module {
  id String @id @default(uuid()) @db.Uuid

  materials Material[]
  test Test[]
  progress moduleProgress[]

  name String
  img_url String?
  description String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("modules")
}

model Material {
  id String @id @default(uuid()) @db.Uuid
  moduleId String @db.Uuid

  completed contentProgress[]

  module  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  title String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("materials")
}

model Test {
  id String @id @default(uuid()) @db.Uuid
  moduleId String @db.Uuid

  completed contentProgress[]

  module  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  title String
  description String
  config Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("test")
}


model contentProgress {
  id String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  materialId String? @db.Uuid
  testId String? @db.Uuid

  material Material? @relation(fields: [materialId], references: [id], onDelete: Cascade)
  test Test? @relation(fields: [testId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("content_progress")
}

model moduleProgress {
  id String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  moduleId String @db.Uuid

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  progress Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("module_progress")
}